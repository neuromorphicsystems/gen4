#pragma once

#pragma warning(disable : 4250)

#include "camera.hpp"
#include "sepia.hpp"
#include "usb.hpp"
#include <functional>
#include <iomanip>
#include <sstream>

#define sepia_psee413_bias(name, offset, flags)                                                                        \
    if (force || camera_parameters.biases.name != _previous_parameters.biases.name) {                                  \
        bulk_request(                                                                                                  \
            {0x56,                                                                                                     \
             0x00,                                                                                                     \
             0x00,                                                                                                     \
             0x00,                                                                                                     \
             offset,                                                                                                   \
             0x10,                                                                                                     \
             0x00,                                                                                                     \
             0x00,                                                                                                     \
             static_cast<uint8_t>(bgen_idac_ctl(camera_parameters.biases.name)),                                       \
             force ? static_cast<uint8_t>(((flags) >> 8) & 0xff) : static_cast<uint8_t>(0),                            \
             static_cast<uint8_t>(((flags) >> 16) & 0xff),                                                             \
             static_cast<uint8_t>(((force ? (flags) : ((flags) | bgen_single)) >> 24) & 0xff)},                        \
            100);                                                                                                      \
    }

namespace sepia {
    namespace psee413 {
        /// get_serial reads the serial of an interface.
        std::string get_serial(sepia::usb::interface& interface) {
            interface.bulk_transfer("serial request", 0x02, {0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
            const auto buffer = interface.bulk_transfer("serial response", 0x82, std::vector<uint8_t>(16));
            std::stringstream serial;
            serial << std::hex;
            for (uint8_t index = 11; index > 7; --index) {
                serial << std::setw(2) << std::setfill('0') << static_cast<uint16_t>(buffer[index]);
            }
            return serial.str();
        }

        /// available_devices returns a list of connected devices serials and speeds.
        inline std::vector<usb::device_properties> available_devices() {
            return usb::available_devices(0x04b4, 0x00f4, get_serial);
        }

        /// name is the camera model.
        constexpr char name[] = "PSEE-413";

        /// width is the number of pixel columns.
        constexpr uint16_t width = 1280;

        /// height is the number of pixel rows.
        constexpr uint16_t height = 720;

        /// trigger_event represents a rising or falling edge on the camera's external pins.
        SEPIA_PACK(struct trigger_event {
            uint64_t t;
            uint8_t id;
            bool rising;
        });

        /// bias_currents lists the camera bias currents.
        struct bias_currents {
            uint8_t pr;
            uint8_t fo_p;
            uint8_t fo_n;
            uint8_t hpf;
            uint8_t diff_on;
            uint8_t diff;
            uint8_t diff_off;
            uint8_t refr;
            uint8_t reqpuy;
            uint8_t blk;

            static std::vector<std::string> names() {
                return {
                    "pr",
                    "fo_p",
                    "fo_n",
                    "hpf",
                    "diff_on",
                    "diff",
                    "diff_off",
                    "refr",
                    "reqpuy",
                    "blk",
                };
            }

            uint8_t& by_name(const std::string& name) {
                if (name == "pr") {
                    return pr;
                }
                if (name == "fo_p") {
                    return fo_p;
                }
                if (name == "fo_n") {
                    return fo_n;
                }
                if (name == "hpf") {
                    return hpf;
                }
                if (name == "diff_on") {
                    return diff_on;
                }
                if (name == "diff") {
                    return diff;
                }
                if (name == "diff_off") {
                    return diff_off;
                }
                if (name == "refr") {
                    return refr;
                }
                if (name == "reqpuy") {
                    return reqpuy;
                }
                if (name == "blk") {
                    return blk;
                }
                throw std::runtime_error(std::string("unknown bias name \"") + name + "\"");
            }
        };

        /// parameters lists the camera parameters.
        struct parameters {
            bias_currents biases;
        };

        /// default_parameters provides camera parameters tuned for standard use.
        constexpr parameters default_parameters{
            {0x69, 0x4a, 0x00, 0x00, 0x73, 0x50, 0x34, 0x44, 0x94, 0x78},
        };

        /// base_camera is a common base type for CSD4MHDCD cameras.
        class base_camera : public sepia::parametric_camera<parameters> {
            public:
            base_camera(const parameters& camera_parameters) :
                sepia::parametric_camera<parameters>(camera_parameters) {}
            base_camera(const base_camera&) = delete;
            base_camera(base_camera&& other) = delete;
            base_camera& operator=(const base_camera&) = delete;
            base_camera& operator=(base_camera&& other) = delete;
            virtual ~base_camera() {}
        };

        /// mask_and_shift fills in register bits.
        static constexpr uint32_t mask_and_shift(uint32_t mask, uint8_t shift, uint32_t value) {
            return (value & mask) << shift;
        };
        template <uint8_t shift>
        constexpr uint32_t shift_bit() {
            return mask_and_shift(1, shift, 1u);
        }

        // bias generation
        auto bgen_idac_ctl = std::bind(mask_and_shift, 0b11111111u, 0, std::placeholders::_1);
        auto bgen_vdac_ctl = std::bind(mask_and_shift, 0b11111111u, 8, std::placeholders::_1);
        auto bgen_buf_stg = std::bind(mask_and_shift, 0b111u, 16, std::placeholders::_1);
        constexpr auto bgen_ibtype_sel = shift_bit<19>();
        constexpr auto begn_mux_sel = shift_bit<20>();
        constexpr auto bgen_mux_en = shift_bit<21>();
        constexpr auto bgen_vdac_en = shift_bit<22>();
        constexpr auto bgen_buf_en = shift_bit<23>();
        constexpr auto bgen_idac_en = shift_bit<24>();
        auto bgen_reserved = std::bind(mask_and_shift, 0b111u, 25, std::placeholders::_1);
        constexpr auto bgen_single = shift_bit<28>();
        constexpr auto bgenctrl_burst_transfer_bank_0 = shift_bit<0>();
        constexpr auto bgenctrl_burst_transfer_bank_1 = shift_bit<1>();
        constexpr auto bgenctrl_bias_rstn = shift_bit<2>();
        constexpr auto bgenspr_enable = shift_bit<0>();
        auto bgenspr_value = std::bind(mask_and_shift, 0b111111111111111u, 1, std::placeholders::_1);

        // clock control
        constexpr auto clk_control_core_en = shift_bit<0>();
        constexpr auto clk_control_core_soft_rst = shift_bit<1>();
        constexpr auto clk_control_core_reg_bank_rst = shift_bit<2>();
        constexpr auto clk_control_sensor_if_en = shift_bit<4>();
        constexpr auto clk_control_sensor_if_soft_rst = shift_bit<5>();
        constexpr auto clk_control_sensor_if_reg_bank_rst = shift_bit<6>();
        constexpr auto clk_control_host_if_en = shift_bit<8>();
        constexpr auto clk_control_host_if_soft_rst = shift_bit<9>();
        constexpr auto clk_control_host_if_reg_bank_rst = shift_bit<10>();

        // LIFO configuration (global absolute illumination)
        constexpr auto lifo_pad_en = shift_bit<0>();
        constexpr auto lifo_px_array_en = shift_bit<1>();
        constexpr auto lifo_calib_en = shift_bit<2>();
        constexpr auto lifo_calib_x10_en = shift_bit<3>();
        constexpr auto lifo_out_en = shift_bit<4>();

        // LIFO control (global absolute illumination)
        auto lifo_ctrl_counter = std::bind(mask_and_shift, 0x3ffffff, 0, std::placeholders::_1);
        constexpr auto lifo_ctrl_counter_valid = shift_bit<30>();
        constexpr auto lifo_ctrl_cnt_en = shift_bit<30>();
        constexpr auto lifo_ctrl_en = shift_bit<31>();

        // pads control
        auto dig_pad_ctrl_miso_drive_strength = std::bind(mask_and_shift, 0b11, 0, std::placeholders::_1);
        auto dig_pad_ctrl_cam_sync_drive_strength = std::bind(mask_and_shift, 0b11, 2, std::placeholders::_1);
        auto dig_pad_ctrl_gpio1_drive_strength = std::bind(mask_and_shift, 0b11, 4, std::placeholders::_1);
        auto dig_pad_ctrl_gpio2_drive_strength = std::bind(mask_and_shift, 0b11, 6, std::placeholders::_1);
        auto dig_pad_ctrl_d_drive_strength = std::bind(mask_and_shift, 0b11, 8, std::placeholders::_1);
        auto dig_pad_ctrl_tpd_drive_strength = std::bind(mask_and_shift, 0b11, 10, std::placeholders::_1);

        // event data formatter
        constexpr auto edf_control_format_2_0 = 0u;
        constexpr auto edf_control_format_3_0 = 1u;
        constexpr auto edf_pipeline_control_enable = shift_bit<0>();
        constexpr auto edf_pipeline_control_bypass = shift_bit<1>();
        constexpr auto edf_pipeline_control_preserve_last = shift_bit<2>();
        auto edf_pipeline_control_bypass_mem = std::bind(mask_and_shift, 0b11, 3, std::placeholders::_1);
        auto edf_pipeline_control_timeout = std::bind(mask_and_shift, 0xffffu, 16, std::placeholders::_1);

        // event output interface
        constexpr auto eoi_mode_control_enable = shift_bit<0>();
        constexpr auto eoi_mode_control_bypass_enable = shift_bit<1>();
        constexpr auto eoi_mode_control_packet_enable = shift_bit<2>();
        constexpr auto eoi_mode_control_short_latency_enable = shift_bit<3>();
        constexpr auto eoi_mode_control_short_latency_skip_enable = shift_bit<4>();
        auto eoi_mode_control_unpacking_byte_order = std::bind(mask_and_shift, 0b11, 5, std::placeholders::_1);
        constexpr auto eoi_mode_control_gpif_like_enable = shift_bit<7>();
        constexpr auto eoi_mode_control_fifo_bypass = shift_bit<8>();
        constexpr auto eoi_mode_control_clk_out_en = shift_bit<9>();
        constexpr auto eoi_mode_control_clk_out_pol = shift_bit<10>();
        auto eoi_mode_control_self_test = std::bind(mask_and_shift, 0b11, 11, std::placeholders::_1);
        constexpr auto eoi_mode_control_out_gating_disable = shift_bit<13>();

        // event rate control
        constexpr auto erc_drop_rate_event_delay_fifo_en = shift_bit<0>();
        constexpr auto erc_drop_rate_manual_en = shift_bit<1>();
        auto erc_drop_rate_manual_td_value = std::bind(mask_and_shift, 0b11111, 2, std::placeholders::_1);
        auto erc_drop_rate_manual_em_value = std::bind(mask_and_shift, 0b11111, 7, std::placeholders::_1);
        auto erc_em_target_event_rate_val = std::bind(mask_and_shift, 0x003fffffu, 0, std::placeholders::_1);
        constexpr auto erc_h_dropping_control_en = shift_bit<0>();
        auto erc_h_dropping_lut_v0 = std::bind(mask_and_shift, 0b11111u, 0, std::placeholders::_1);
        auto erc_h_dropping_lut_v1 = std::bind(mask_and_shift, 0b11111u, 8, std::placeholders::_1);
        auto erc_h_dropping_lut_v2 = std::bind(mask_and_shift, 0b11111u, 16, std::placeholders::_1);
        auto erc_h_dropping_lut_v3 = std::bind(mask_and_shift, 0b11111u, 24, std::placeholders::_1);
        constexpr auto erc_pipeline_control_en = shift_bit<0>();
        constexpr auto erc_pipeline_control_bypass = shift_bit<1>();
        constexpr auto erc_pipeline_control_fifo0_bypass = shift_bit<2>();
        constexpr auto erc_pipeline_control_fifo1_bypass = shift_bit<3>();
        constexpr auto erc_pipeline_control_fifo2_bypass = shift_bit<4>();
        auto erc_reference_period_val = std::bind(mask_and_shift, 0b1111111111u, 0, std::placeholders::_1);
        auto erc_pong_drop_interest_v0 = std::bind(mask_and_shift, 0b111111u, 0, std::placeholders::_1);
        auto erc_pong_drop_interest_v1 = std::bind(mask_and_shift, 0b111111u, 8, std::placeholders::_1);
        auto erc_pong_drop_interest_v2 = std::bind(mask_and_shift, 0b111111u, 16, std::placeholders::_1);
        auto erc_pong_drop_interest_v3 = std::bind(mask_and_shift, 0b111111u, 24, std::placeholders::_1);
        constexpr auto erc_refine_drop_rate_td_en = shift_bit<0>();
        constexpr auto erc_refine_drop_rate_interest_level_td_en = shift_bit<1>();
        constexpr auto erc_refine_drop_rate_out_fb_td_en = shift_bit<2>();
        constexpr auto erc_refine_drop_rate_em_en = shift_bit<3>();
        constexpr auto erc_refine_drop_rate_interest_level_em_en = shift_bit<4>();
        constexpr auto erc_refine_drop_rate_out_fb_em_en = shift_bit<5>();
        auto erc_select_pong_grid_mem_val = std::bind(mask_and_shift, 0b11u, 0, std::placeholders::_1);
        constexpr auto erc_t_dropping_control_en = shift_bit<0>();
        auto erc_t_dropping_lut_v0 = std::bind(mask_and_shift, 0b11111u, 0, std::placeholders::_1);
        auto erc_t_dropping_lut_v1 = std::bind(mask_and_shift, 0b11111u, 8, std::placeholders::_1);
        auto erc_t_dropping_lut_v2 = std::bind(mask_and_shift, 0b11111u, 16, std::placeholders::_1);
        auto erc_t_dropping_lut_v3 = std::bind(mask_and_shift, 0b11111u, 24, std::placeholders::_1);
        auto erc_td_target_event_rate_val = std::bind(mask_and_shift, 0x003fffffu, 0, std::placeholders::_1);
        constexpr auto erc_v_dropping_control_en = shift_bit<0>();
        auto erc_v_dropping_lut_v0 = std::bind(mask_and_shift, 0b11111u, 0, std::placeholders::_1);
        auto erc_v_dropping_lut_v1 = std::bind(mask_and_shift, 0b11111u, 8, std::placeholders::_1);
        auto erc_v_dropping_lut_v2 = std::bind(mask_and_shift, 0b11111u, 16, std::placeholders::_1);
        auto erc_v_dropping_lut_v3 = std::bind(mask_and_shift, 0b11111u, 24, std::placeholders::_1);

        // event formatter
        constexpr auto evt_data_formatter_control_enable = shift_bit<0>();
        constexpr auto evt_data_formatter_control_bypass = shift_bit<1>();
        constexpr auto evt_merge_control_enable = shift_bit<0>();
        constexpr auto evt_merge_control_bypass = shift_bit<1>();
        constexpr auto evt_merge_control_source = shift_bit<2>();

        // external triggers
        constexpr auto ext_trigger_0_enable = shift_bit<0>();
        constexpr auto ext_trigger_1_enable = shift_bit<1>();
        constexpr auto ext_trigger_2_enable = shift_bit<2>();
        constexpr auto ext_trigger_3_enable = shift_bit<3>();
        constexpr auto ext_trigger_4_enable = shift_bit<4>();
        constexpr auto ext_trigger_5_enable = shift_bit<5>();
        constexpr auto ext_trigger_6_enable = shift_bit<6>();

        // FPGA control
        constexpr auto fpga_ctrl_enable = shift_bit<0>();
        constexpr auto fpga_ctrl_bypass = shift_bit<1>();
        constexpr auto fpga_ctrl_blocking_mode = shift_bit<2>();
        constexpr auto fpga_ctrl_arst_n = shift_bit<3>();
        constexpr auto fpga_ctrl_td_arst_n = shift_bit<4>();
        constexpr auto fpga_ctrl_em_arst_n = shift_bit<5>();
        constexpr auto fpga_ctrl_test_mode = shift_bit<6>();
        constexpr auto fpga_ctrl_ldo_vdda_en = shift_bit<7>();
        constexpr auto fpga_ctrl_ldo_vddc_en = shift_bit<8>();
        constexpr auto fpga_ctrl_ldo_vddio_en = shift_bit<9>();
        constexpr auto fpga_ctrl_ldo_vneg_en = shift_bit<10>();
        constexpr auto fpga_ctrl_last_ctrl_mode = shift_bit<11>();
        constexpr auto fpga_ctrl_half_word_swap = shift_bit<12>();
        constexpr auto fpga_ctrl_sensor_clk_en = shift_bit<13>();
        constexpr auto fpga_ctrl_cam_synci_reg = shift_bit<14>();
        constexpr auto fpga_ctrl_ext_trig_reg = shift_bit<15>();
        constexpr auto fpga_ctrl_sensor_clkfreq_ctl = shift_bit<16>();
        constexpr auto fpga_ctrl_sensor_ready_ff = shift_bit<18>();
        constexpr auto fpga_ctrl_clkfreq_vld = shift_bit<19>();
        constexpr auto fpga_ctrl_td_pol_inv = shift_bit<20>();
        constexpr auto fpga_ctrl_em_pol_inv = shift_bit<21>();
        constexpr auto fpga_ctrl_gen_last = shift_bit<22>();

        // global sensor control
        constexpr auto global_ctrl_px_em_couple_ctrl = shift_bit<0>();
        constexpr auto global_ctrl_analog_rstn = shift_bit<1>();
        constexpr auto global_ctrl_erc_self_test_en = shift_bit<2>();

        // low-dropout regulator (power control)
        constexpr auto ldo_ana_en = shift_bit<0>();
        constexpr auto ldo_ana_en_limit = shift_bit<1>();
        constexpr auto ldo_ana_ron = shift_bit<2>();
        constexpr auto ldo_ana_thro = shift_bit<3>();
        constexpr auto ldo_ana_climit1 = shift_bit<4>();
        constexpr auto ldo_ana_climit2 = shift_bit<5>();
        auto ldo_ana_adj = std::bind(mask_and_shift, 0b1111u, 6, std::placeholders::_1);
        auto ldo_ana_comp = std::bind(mask_and_shift, 0b11u, 10, std::placeholders::_1);
        constexpr auto ldo_ana_en_ref = shift_bit<12>();
        constexpr auto ldo_ana_indicator = shift_bit<13>();
        constexpr auto ldo_bg_en = shift_bit<0>();
        constexpr auto ldo_bg_bypass = shift_bit<1>();
        auto ldo_bg_adj = std::bind(mask_and_shift, 0b111u, 2, std::placeholders::_1);
        constexpr auto ldo_bg_th = shift_bit<5>();
        constexpr auto ldo_bg_chk = shift_bit<6>();
        constexpr auto ldo_bg_indicator = shift_bit<7>();
        constexpr auto ldo_bg2_en = shift_bit<0>();
        constexpr auto ldo_bg2_bypass = shift_bit<1>();
        auto ldo_bg2_adj = std::bind(mask_and_shift, 0b111u, 2, std::placeholders::_1);
        constexpr auto ldo_bg2_th = shift_bit<5>();
        constexpr auto ldo_bg2_chk = shift_bit<6>();
        constexpr auto ldo_bg2_indicator = shift_bit<7>();
        auto ldo_cc_dft_cnt = std::bind(mask_and_shift, 0b1111u, 0, std::placeholders::_1);
        auto ldo_cc_inres_adj = std::bind(mask_and_shift, 0b1111u, 4, std::placeholders::_1);
        constexpr auto ldo_cc_en = shift_bit<8>();
        constexpr auto ldo_cc_extres_en = shift_bit<9>();
        constexpr auto ldo_cc_extres_enh = shift_bit<10>();
        constexpr auto ldo_dig_en = shift_bit<0>();
        constexpr auto ldo_dig_en_limit = shift_bit<1>();
        constexpr auto ldo_dig_psf = shift_bit<2>();
        constexpr auto ldo_dig_ron = shift_bit<3>();
        constexpr auto ldo_dig_thro = shift_bit<4>();
        constexpr auto ldo_dig_climit100ma = shift_bit<5>();
        constexpr auto ldo_dig_climit600ma = shift_bit<6>();
        auto ldo_dig_adj = std::bind(mask_and_shift, 0b1111u, 7, std::placeholders::_1);
        auto ldo_dig_comp = std::bind(mask_and_shift, 0b11u, 11, std::placeholders::_1);
        constexpr auto ldo_dig_en_ref = shift_bit<13>();
        constexpr auto ldo_dig_indicator = shift_bit<14>();
        constexpr auto ldo_dig_en_delay = shift_bit<15>();
        constexpr auto ldo_dig_start_pulse = shift_bit<16>();
        constexpr auto ldo_pix_en = shift_bit<0>();
        constexpr auto ldo_pix_en_limit = shift_bit<1>();
        constexpr auto ldo_pix_ron = shift_bit<2>();
        constexpr auto ldo_pix_thro = shift_bit<3>();
        auto ldo_pix_adj = std::bind(mask_and_shift, 0b111u, 4, std::placeholders::_1);
        constexpr auto ldo_pix_climit1 = shift_bit<7>();
        constexpr auto ldo_pix_climit2 = shift_bit<8>();
        constexpr auto ldo_pix_en_ref = shift_bit<9>();
        constexpr auto ldo_pix_indicator = shift_bit<10>();
        constexpr auto ldo_pix_start_pulse = shift_bit<11>();

        // analog readout
        constexpr auto readout_ctrl_test_pixel_mux_en = shift_bit<0>();
        constexpr auto readout_ctrl_td_self_test_en = shift_bit<2>();
        constexpr auto readout_ctrl_em_self_test_en = shift_bit<3>();
        constexpr auto readout_ctrl_analog_pipe_en = shift_bit<4>();
        auto ro_act_pdy_drive = std::bind(mask_and_shift, 0b111u, 0, std::placeholders::_1);
        auto ro_act_puy_drive = std::bind(mask_and_shift, 0b111u, 3, std::placeholders::_1);
        constexpr auto ro_sendreq_y_stat_en = shift_bit<7>();
        constexpr auto ro_sendreq_y_rstn = shift_bit<8>();
        constexpr auto ro_int_x_rstn = shift_bit<9>();
        constexpr auto ro_int_y_rstn = shift_bit<10>();
        constexpr auto ro_int_x_stat_en = shift_bit<11>();
        constexpr auto ro_int_y_stat_en = shift_bit<12>();
        constexpr auto ro_addr_y_stat_en = shift_bit<13>();
        constexpr auto ro_addr_y_rstn = shift_bit<14>();
        constexpr auto ro_ack_y_rstn = shift_bit<15>();
        constexpr auto ro_ack_y_rstn_pol = shift_bit<16>();
        constexpr auto ro_arb_y_rstn = shift_bit<17>();

        // region of interest
        constexpr auto roi_ctrl_em_en = shift_bit<0>();
        constexpr auto roi_ctrl_td_en = shift_bit<1>();
        constexpr auto roi_ctrl_em_shadow_trigger = shift_bit<4>();
        constexpr auto roi_ctrl_td_shadow_trigger = shift_bit<5>();
        constexpr auto roi_ctrl_td_roni_n_en = shift_bit<6>();
        constexpr auto roi_ctrl_em_scan_en = shift_bit<7>();
        constexpr auto roi_ctrl_td_scan_en = shift_bit<8>();
        constexpr auto roi_ctrl_px_em_rstn = shift_bit<9>();
        constexpr auto roi_ctrl_px_td_rstn = shift_bit<10>();
        auto roi_ctrl_td_scan_timer = std::bind(mask_and_shift, 0b1111111u, 11, std::placeholders::_1);
        auto roi_ctrl_em_scan_timer = std::bind(mask_and_shift, 0b1111111u, 18, std::placeholders::_1);
        auto roi_ctrl_pix_slope_n_ctl = std::bind(mask_and_shift, 0b11u, 28, std::placeholders::_1);
        auto roi_ctrl_pix_slope_p_ctl = std::bind(mask_and_shift, 0b11u, 30, std::placeholders::_1);

        // test bus
        constexpr auto test_bus_ctrl_tp_buf_en = shift_bit<1>();
        constexpr auto test_bus_ctrl_tp_3t_aps_en = shift_bit<2>();
        constexpr auto test_bus_ctrl_tp_ro_buf_en = shift_bit<3>();
        constexpr auto test_bus_ctrl_tp_ro_buf_sel = shift_bit<4>();
        auto test_bus_ctrl_tbus_sel_tpa1 = std::bind(mask_and_shift, 0b1111u, 8, std::placeholders::_1);
        auto test_bus_ctrl_tbus_sel_tpa2 = std::bind(mask_and_shift, 0b1111u, 12, std::placeholders::_1);
        auto test_bus_ctrl_tbus_sel_tpa3 = std::bind(mask_and_shift, 0b1111u, 16, std::placeholders::_1);
        auto test_bus_ctrl_tbus_sel_tpa4 = std::bind(mask_and_shift, 0b1111u, 20, std::placeholders::_1);
        constexpr auto test_bus_ctrl_px_scan_bot = shift_bit<24>();
        constexpr auto test_bus_ctrl_px_scan_top = shift_bit<25>();
        constexpr auto test_bus_ctrl_px_scan_left = shift_bit<26>();
        constexpr auto test_bus_ctrl_px_scan_right = shift_bit<27>();
        constexpr auto test_bus_ctrl_px_scan_pol_sel = shift_bit<28>();

        // th(reshold)?
        constexpr auto th_recovery_control_enable = shift_bit<0>();
        constexpr auto th_recovery_control_bypass = shift_bit<1>();

        // analog time base control
        constexpr auto time_base_ctrl_enable = shift_bit<0>();
        constexpr auto time_base_ctrl_mode = shift_bit<1>();
        constexpr auto time_base_ctrl_external_mode = shift_bit<2>();
        constexpr auto time_base_ctrl_external_mode_enable = shift_bit<3>();
        auto time_base_ctrl_us_counter_max = std::bind(mask_and_shift, 0b1111111u, 4, std::placeholders::_1);

        // digital time base control
        constexpr auto time_base_mode_enable = shift_bit<0>();
        constexpr auto time_base_mode_ext_sync_mode = shift_bit<1>();
        constexpr auto time_base_mode_ext_sync_enable = shift_bit<2>();
        constexpr auto time_base_mode_ext_sync_master = shift_bit<3>();
        constexpr auto time_base_mode_ext_sync_master_sel = shift_bit<4>();
        constexpr auto time_base_mode_enable_ext_sync = shift_bit<5>();
        constexpr auto time_base_mode_enable_cam_sync = shift_bit<6>();

        /// buffered_camera is a buffer observable connected to a PEK3SVCD camera.
        template <typename HandleBuffer, typename HandleException>
        class buffered_camera : public base_camera, public sepia::buffered_camera<HandleBuffer, HandleException> {
            public:
            buffered_camera(
                HandleBuffer&& handle_buffer,
                HandleException&& handle_exception,
                const parameters& camera_parameters = default_parameters,
                const std::string& serial = {},
                const std::chrono::steady_clock::duration& timeout = std::chrono::milliseconds(100),
                std::size_t buffers_count = 64,
                std::size_t fifo_size = 4096,
                std::function<void()> handle_drop = []() {}) :
                base_camera(camera_parameters),
                sepia::buffered_camera<HandleBuffer, HandleException>(
                    std::forward<HandleBuffer>(handle_buffer),
                    std::forward<HandleException>(handle_exception),
                    timeout,
                    fifo_size,
                    std::move(handle_drop)),
                _active_transfers(buffers_count) {
                _interface = usb::open(name, 1204, 244, get_serial, serial);
                std::this_thread::sleep_for(std::chrono::milliseconds(150));
                bulk_request({0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00}, 100);
                std::this_thread::sleep_for(std::chrono::milliseconds(5));
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0x70, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x70, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x85, 0xe0, 0x01, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00, 0x44, 0x06, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x74, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0xb0, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x78, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0xb0, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x64, 0x00, 0x10}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x14, 0x00, 0x10}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x14, 0x00, 0x10}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x68, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0xb0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0xb0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x14, 0x00, 0x50}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x14, 0x00, 0x50}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x14, 0x00, 0x50}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x64, 0x00, 0x50}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x64, 0x00, 0x50}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0xb0, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0xb0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0xb0, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0xb0, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0xb0, 0x00, 0x00, 0xdf, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0xb0, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x98, 0xb0, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x9c, 0xb0, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0xb0, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa4, 0xb0, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xac, 0xb0, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0xcc, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xcc, 0xb0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0xb0, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0xb0, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x20, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0xb0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x2c, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0xb0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x30, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0xb0, 0x00, 0x00, 0x80, 0x3e, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x28, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0xb0, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0xa0, 0x00, 0x00, 0x01, 0x24, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x20, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0xa0, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0xb0, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc8, 0xb0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x44, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0xb0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x85, 0xe0, 0x01, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0x70, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x70, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x03, 0x54, 0x15, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x54, 0x15, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x60, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x60, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x60, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x5c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x98, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x9c, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa4, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa8, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xac, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb0, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb4, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb8, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xbc, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc0, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc4, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc8, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xcc, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd0, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd4, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd8, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xdc, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe0, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe4, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe8, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xec, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf0, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf4, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf8, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xfc, 0x68, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x5c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x98, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x9c, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa4, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa8, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xac, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb0, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb4, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb8, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xbc, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc0, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc4, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc8, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xcc, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd0, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd4, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd8, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xdc, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe0, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe4, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe8, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xec, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf0, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf4, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf8, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xfc, 0x69, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x5c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x98, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x9c, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa4, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa8, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xac, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb0, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb4, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb8, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xbc, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc0, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc4, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc8, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xcc, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd0, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd4, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd8, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xdc, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe0, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe4, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe8, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xec, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf0, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf4, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf8, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xfc, 0x6a, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x5c, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0x6b, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x64, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x64, 0x00, 0x00, 0x04, 0x00, 0x05, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x64, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x64, 0x00, 0x00, 0x08, 0x00, 0x09, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x64, 0x00, 0x00, 0x0a, 0x00, 0x0b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x64, 0x00, 0x00, 0x0c, 0x00, 0x0d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x64, 0x00, 0x00, 0x0e, 0x00, 0x0f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x64, 0x00, 0x00, 0x10, 0x00, 0x11, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x64, 0x00, 0x00, 0x12, 0x00, 0x13, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x64, 0x00, 0x00, 0x14, 0x00, 0x15, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x64, 0x00, 0x00, 0x16, 0x00, 0x17, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x64, 0x00, 0x00, 0x18, 0x00, 0x19, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x64, 0x00, 0x00, 0x1a, 0x00, 0x1b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x64, 0x00, 0x00, 0x1c, 0x00, 0x1d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x64, 0x00, 0x00, 0x1e, 0x00, 0x1f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x64, 0x00, 0x00, 0x20, 0x00, 0x21, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x64, 0x00, 0x00, 0x22, 0x00, 0x23, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x64, 0x00, 0x00, 0x24, 0x00, 0x25, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x64, 0x00, 0x00, 0x26, 0x00, 0x27, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x64, 0x00, 0x00, 0x28, 0x00, 0x29, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x64, 0x00, 0x00, 0x2a, 0x00, 0x2b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x64, 0x00, 0x00, 0x2c, 0x00, 0x2d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x5c, 0x64, 0x00, 0x00, 0x2e, 0x00, 0x2f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x64, 0x00, 0x00, 0x30, 0x00, 0x31, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x64, 0x00, 0x00, 0x32, 0x00, 0x33, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0x64, 0x00, 0x00, 0x34, 0x00, 0x35, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x64, 0x00, 0x00, 0x36, 0x00, 0x37, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x64, 0x00, 0x00, 0x38, 0x00, 0x39, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0x64, 0x00, 0x00, 0x3a, 0x00, 0x3b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0x64, 0x00, 0x00, 0x3c, 0x00, 0x3d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0x64, 0x00, 0x00, 0x3e, 0x00, 0x3f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0x64, 0x00, 0x00, 0x40, 0x00, 0x41, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0x64, 0x00, 0x00, 0x42, 0x00, 0x43, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0x64, 0x00, 0x00, 0x44, 0x00, 0x45, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0x64, 0x00, 0x00, 0x46, 0x00, 0x47, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0x64, 0x00, 0x00, 0x48, 0x00, 0x49, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0x64, 0x00, 0x00, 0x4a, 0x00, 0x4b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x98, 0x64, 0x00, 0x00, 0x4c, 0x00, 0x4d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x9c, 0x64, 0x00, 0x00, 0x4e, 0x00, 0x4f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x64, 0x00, 0x00, 0x50, 0x00, 0x51, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa4, 0x64, 0x00, 0x00, 0x52, 0x00, 0x53, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa8, 0x64, 0x00, 0x00, 0x54, 0x00, 0x55, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xac, 0x64, 0x00, 0x00, 0x56, 0x00, 0x57, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb0, 0x64, 0x00, 0x00, 0x58, 0x00, 0x59, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb4, 0x64, 0x00, 0x00, 0x5a, 0x00, 0x5b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb8, 0x64, 0x00, 0x00, 0x5c, 0x00, 0x5d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xbc, 0x64, 0x00, 0x00, 0x5e, 0x00, 0x5f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc0, 0x64, 0x00, 0x00, 0x60, 0x00, 0x61, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc4, 0x64, 0x00, 0x00, 0x62, 0x00, 0x63, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc8, 0x64, 0x00, 0x00, 0x64, 0x00, 0x65, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xcc, 0x64, 0x00, 0x00, 0x66, 0x00, 0x67, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd0, 0x64, 0x00, 0x00, 0x68, 0x00, 0x69, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd4, 0x64, 0x00, 0x00, 0x6a, 0x00, 0x6b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd8, 0x64, 0x00, 0x00, 0x6c, 0x00, 0x6d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xdc, 0x64, 0x00, 0x00, 0x6e, 0x00, 0x6f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe0, 0x64, 0x00, 0x00, 0x70, 0x00, 0x71, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe4, 0x64, 0x00, 0x00, 0x72, 0x00, 0x73, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe8, 0x64, 0x00, 0x00, 0x74, 0x00, 0x75, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xec, 0x64, 0x00, 0x00, 0x76, 0x00, 0x77, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf0, 0x64, 0x00, 0x00, 0x78, 0x00, 0x79, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf4, 0x64, 0x00, 0x00, 0x7a, 0x00, 0x7b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf8, 0x64, 0x00, 0x00, 0x7c, 0x00, 0x7d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xfc, 0x64, 0x00, 0x00, 0x7e, 0x00, 0x7f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x80, 0x00, 0x81, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x65, 0x00, 0x00, 0x82, 0x00, 0x83, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x65, 0x00, 0x00, 0x84, 0x00, 0x85, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x65, 0x00, 0x00, 0x86, 0x00, 0x87, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x65, 0x00, 0x00, 0x88, 0x00, 0x89, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x65, 0x00, 0x00, 0x8a, 0x00, 0x8b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x65, 0x00, 0x00, 0x8c, 0x00, 0x8d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x65, 0x00, 0x00, 0x8e, 0x00, 0x8f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x65, 0x00, 0x00, 0x90, 0x00, 0x91, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x65, 0x00, 0x00, 0x92, 0x00, 0x93, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x65, 0x00, 0x00, 0x94, 0x00, 0x95, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x65, 0x00, 0x00, 0x96, 0x00, 0x97, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x65, 0x00, 0x00, 0x98, 0x00, 0x99, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x65, 0x00, 0x00, 0x9a, 0x00, 0x9b, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x65, 0x00, 0x00, 0x9c, 0x00, 0x9d, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x65, 0x00, 0x00, 0x9e, 0x00, 0x9f, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x65, 0x00, 0x00, 0xa0, 0x00, 0xa1, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x65, 0x00, 0x00, 0xa2, 0x00, 0xa3, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x65, 0x00, 0x00, 0xa4, 0x00, 0xa5, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x65, 0x00, 0x00, 0xa6, 0x00, 0xa7, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x65, 0x00, 0x00, 0xa8, 0x00, 0xa9, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x65, 0x00, 0x00, 0xaa, 0x00, 0xab, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x65, 0x00, 0x00, 0xac, 0x00, 0xad, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x5c, 0x65, 0x00, 0x00, 0xae, 0x00, 0xaf, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x65, 0x00, 0x00, 0xb0, 0x00, 0xb1, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x65, 0x00, 0x00, 0xb2, 0x00, 0xb3, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0x65, 0x00, 0x00, 0xb4, 0x00, 0xb5, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x65, 0x00, 0x00, 0xb6, 0x00, 0xb7, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x65, 0x00, 0x00, 0xb8, 0x00, 0xb9, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0x65, 0x00, 0x00, 0xba, 0x00, 0xbb, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0x65, 0x00, 0x00, 0xbc, 0x00, 0xbd, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0x65, 0x00, 0x00, 0xbe, 0x00, 0xbf, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0x65, 0x00, 0x00, 0xc0, 0x00, 0xc1, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0x65, 0x00, 0x00, 0xc2, 0x00, 0xc3, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0x65, 0x00, 0x00, 0xc4, 0x00, 0xc5, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0x65, 0x00, 0x00, 0xc6, 0x00, 0xc7, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0x65, 0x00, 0x00, 0xc8, 0x00, 0xc9, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0x65, 0x00, 0x00, 0xca, 0x00, 0xcb, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x98, 0x65, 0x00, 0x00, 0xcc, 0x00, 0xcd, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x9c, 0x65, 0x00, 0x00, 0xce, 0x00, 0xcf, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x65, 0x00, 0x00, 0xd0, 0x00, 0xd1, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa4, 0x65, 0x00, 0x00, 0xd2, 0x00, 0xd3, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa8, 0x65, 0x00, 0x00, 0xd4, 0x00, 0xd5, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xac, 0x65, 0x00, 0x00, 0xd6, 0x00, 0xd7, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xd8, 0x00, 0xd9, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb4, 0x65, 0x00, 0x00, 0xda, 0x00, 0xdb, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb8, 0x65, 0x00, 0x00, 0xdc, 0x00, 0xdd, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xbc, 0x65, 0x00, 0x00, 0xde, 0x00, 0xdf, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc0, 0x65, 0x00, 0x00, 0xe0, 0x00, 0xe1, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc4, 0x65, 0x00, 0x00, 0xe2, 0x00, 0xe3, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc8, 0x65, 0x00, 0x00, 0xe4, 0x00, 0xe5, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xcc, 0x65, 0x00, 0x00, 0xe6, 0x00, 0xe7, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd0, 0x65, 0x00, 0x00, 0xe8, 0x00, 0xe9, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd4, 0x65, 0x00, 0x00, 0xea, 0x00, 0xeb, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd8, 0x65, 0x00, 0x00, 0xec, 0x00, 0xed, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xdc, 0x65, 0x00, 0x00, 0xee, 0x00, 0xef, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe0, 0x65, 0x00, 0x00, 0xf0, 0x00, 0xf1, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe4, 0x65, 0x00, 0x00, 0xf2, 0x00, 0xf3, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe8, 0x65, 0x00, 0x00, 0xf4, 0x00, 0xf5, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xec, 0x65, 0x00, 0x00, 0xf6, 0x00, 0xf7, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf0, 0x65, 0x00, 0x00, 0xf8, 0x00, 0xf9, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf4, 0x65, 0x00, 0x00, 0xfa, 0x00, 0xfb, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf8, 0x65, 0x00, 0x00, 0xfc, 0x00, 0xfd, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xfc, 0x65, 0x00, 0x00, 0xfe, 0x00, 0xff, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x66, 0x00, 0x00, 0x02, 0x01, 0x03, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x66, 0x00, 0x00, 0x04, 0x01, 0x05, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x00, 0x00, 0x06, 0x01, 0x07, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x66, 0x00, 0x00, 0x08, 0x01, 0x09, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x66, 0x00, 0x00, 0x0a, 0x01, 0x0b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x66, 0x00, 0x00, 0x0c, 0x01, 0x0d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x66, 0x00, 0x00, 0x0e, 0x01, 0x0f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x66, 0x00, 0x00, 0x10, 0x01, 0x11, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x66, 0x00, 0x00, 0x12, 0x01, 0x13, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x66, 0x00, 0x00, 0x14, 0x01, 0x15, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x66, 0x00, 0x00, 0x16, 0x01, 0x17, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x66, 0x00, 0x00, 0x18, 0x01, 0x19, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x66, 0x00, 0x00, 0x1a, 0x01, 0x1b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x66, 0x00, 0x00, 0x1c, 0x01, 0x1d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x00, 0x00, 0x1e, 0x01, 0x1f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x66, 0x00, 0x00, 0x20, 0x01, 0x21, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x66, 0x00, 0x00, 0x22, 0x01, 0x23, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x66, 0x00, 0x00, 0x24, 0x01, 0x25, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x66, 0x00, 0x00, 0x26, 0x01, 0x27, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x66, 0x00, 0x00, 0x28, 0x01, 0x29, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x66, 0x00, 0x00, 0x2a, 0x01, 0x2b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x66, 0x00, 0x00, 0x2c, 0x01, 0x2d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x5c, 0x66, 0x00, 0x00, 0x2e, 0x01, 0x2f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x66, 0x00, 0x00, 0x30, 0x01, 0x31, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x66, 0x00, 0x00, 0x32, 0x01, 0x33, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0x66, 0x00, 0x00, 0x34, 0x01, 0x35, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x66, 0x00, 0x00, 0x36, 0x01, 0x37, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x66, 0x00, 0x00, 0x38, 0x01, 0x39, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0x66, 0x00, 0x00, 0x3a, 0x01, 0x3b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0x66, 0x00, 0x00, 0x3c, 0x01, 0x3d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0x66, 0x00, 0x00, 0x3e, 0x01, 0x3f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0x66, 0x00, 0x00, 0x40, 0x01, 0x41, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0x66, 0x00, 0x00, 0x42, 0x01, 0x43, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0x66, 0x00, 0x00, 0x44, 0x01, 0x45, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0x66, 0x00, 0x00, 0x46, 0x01, 0x47, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0x66, 0x00, 0x00, 0x48, 0x01, 0x49, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0x66, 0x00, 0x00, 0x4a, 0x01, 0x4b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x98, 0x66, 0x00, 0x00, 0x4c, 0x01, 0x4d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x9c, 0x66, 0x00, 0x00, 0x4e, 0x01, 0x4f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x66, 0x00, 0x00, 0x50, 0x01, 0x51, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa4, 0x66, 0x00, 0x00, 0x52, 0x01, 0x53, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa8, 0x66, 0x00, 0x00, 0x54, 0x01, 0x55, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xac, 0x66, 0x00, 0x00, 0x56, 0x01, 0x57, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb0, 0x66, 0x00, 0x00, 0x58, 0x01, 0x59, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb4, 0x66, 0x00, 0x00, 0x5a, 0x01, 0x5b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb8, 0x66, 0x00, 0x00, 0x5c, 0x01, 0x5d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xbc, 0x66, 0x00, 0x00, 0x5e, 0x01, 0x5f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc0, 0x66, 0x00, 0x00, 0x60, 0x01, 0x61, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc4, 0x66, 0x00, 0x00, 0x62, 0x01, 0x63, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc8, 0x66, 0x00, 0x00, 0x64, 0x01, 0x65, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xcc, 0x66, 0x00, 0x00, 0x66, 0x01, 0x67, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd0, 0x66, 0x00, 0x00, 0x68, 0x01, 0x69, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd4, 0x66, 0x00, 0x00, 0x6a, 0x01, 0x6b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd8, 0x66, 0x00, 0x00, 0x6c, 0x01, 0x6d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x00, 0x00, 0x6e, 0x01, 0x6f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe0, 0x66, 0x00, 0x00, 0x70, 0x01, 0x71, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe4, 0x66, 0x00, 0x00, 0x72, 0x01, 0x73, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe8, 0x66, 0x00, 0x00, 0x74, 0x01, 0x75, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xec, 0x66, 0x00, 0x00, 0x76, 0x01, 0x77, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf0, 0x66, 0x00, 0x00, 0x78, 0x01, 0x79, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf4, 0x66, 0x00, 0x00, 0x7a, 0x01, 0x7b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf8, 0x66, 0x00, 0x00, 0x7c, 0x01, 0x7d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x00, 0x00, 0x7e, 0x01, 0x7f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x80, 0x01, 0x81, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x67, 0x00, 0x00, 0x82, 0x01, 0x83, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x67, 0x00, 0x00, 0x84, 0x01, 0x85, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x67, 0x00, 0x00, 0x86, 0x01, 0x87, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x67, 0x00, 0x00, 0x88, 0x01, 0x89, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x67, 0x00, 0x00, 0x8a, 0x01, 0x8b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x67, 0x00, 0x00, 0x8c, 0x01, 0x8d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x67, 0x00, 0x00, 0x8e, 0x01, 0x8f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x67, 0x00, 0x00, 0x90, 0x01, 0x91, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x67, 0x00, 0x00, 0x92, 0x01, 0x93, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x67, 0x00, 0x00, 0x94, 0x01, 0x95, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x67, 0x00, 0x00, 0x96, 0x01, 0x97, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x67, 0x00, 0x00, 0x98, 0x01, 0x99, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x67, 0x00, 0x00, 0x9a, 0x01, 0x9b, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x67, 0x00, 0x00, 0x9c, 0x01, 0x9d, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x67, 0x00, 0x00, 0x9e, 0x01, 0x9f, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x67, 0x00, 0x00, 0xa0, 0x01, 0xa1, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x67, 0x00, 0x00, 0xa2, 0x01, 0xa3, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x67, 0x00, 0x00, 0xa4, 0x01, 0xa5, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x67, 0x00, 0x00, 0xa6, 0x01, 0xa7, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x67, 0x00, 0x00, 0xa8, 0x01, 0xa9, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x67, 0x00, 0x00, 0xaa, 0x01, 0xab, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x67, 0x00, 0x00, 0xac, 0x01, 0xad, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x5c, 0x67, 0x00, 0x00, 0xae, 0x01, 0xaf, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x67, 0x00, 0x00, 0xb0, 0x01, 0xb1, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x67, 0x00, 0x00, 0xb2, 0x01, 0xb3, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0x67, 0x00, 0x00, 0xb4, 0x01, 0xb5, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x67, 0x00, 0x00, 0xb6, 0x01, 0xb7, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x67, 0x00, 0x00, 0xb8, 0x01, 0xb9, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0x67, 0x00, 0x00, 0xba, 0x01, 0xbb, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0x67, 0x00, 0x00, 0xbc, 0x01, 0xbd, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0x67, 0x00, 0x00, 0xbe, 0x01, 0xbf, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0x67, 0x00, 0x00, 0xc0, 0x01, 0xc1, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0x67, 0x00, 0x00, 0xc2, 0x01, 0xc3, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0x67, 0x00, 0x00, 0xc4, 0x01, 0xc5, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0x67, 0x00, 0x00, 0xc6, 0x01, 0xc7, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0x67, 0x00, 0x00, 0xc8, 0x01, 0xc9, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0x67, 0x00, 0x00, 0xca, 0x01, 0xcb, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x98, 0x67, 0x00, 0x00, 0xcc, 0x01, 0xcd, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x9c, 0x67, 0x00, 0x00, 0xce, 0x01, 0xcf, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x67, 0x00, 0x00, 0xd0, 0x01, 0xd1, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa4, 0x67, 0x00, 0x00, 0xd2, 0x01, 0xd3, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa8, 0x67, 0x00, 0x00, 0xd4, 0x01, 0xd5, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xac, 0x67, 0x00, 0x00, 0xd6, 0x01, 0xd7, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb0, 0x67, 0x00, 0x00, 0xd8, 0x01, 0xd9, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb4, 0x67, 0x00, 0x00, 0xda, 0x01, 0xdb, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xb8, 0x67, 0x00, 0x00, 0xdc, 0x01, 0xdd, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xbc, 0x67, 0x00, 0x00, 0xde, 0x01, 0xdf, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc0, 0x67, 0x00, 0x00, 0xe0, 0x01, 0xe1, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc4, 0x67, 0x00, 0x00, 0xe2, 0x01, 0xe3, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc8, 0x67, 0x00, 0x00, 0xe4, 0x01, 0xe5, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xcc, 0x67, 0x00, 0x00, 0xe6, 0x01, 0xe7, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd0, 0x67, 0x00, 0x00, 0xe8, 0x01, 0xe9, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd4, 0x67, 0x00, 0x00, 0xea, 0x01, 0xeb, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xd8, 0x67, 0x00, 0x00, 0xec, 0x01, 0xed, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xdc, 0x67, 0x00, 0x00, 0xee, 0x01, 0xef, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe0, 0x67, 0x00, 0x00, 0xf0, 0x01, 0xf1, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe4, 0x67, 0x00, 0x00, 0xf2, 0x01, 0xf3, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xe8, 0x67, 0x00, 0x00, 0xf4, 0x01, 0xf5, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xec, 0x67, 0x00, 0x00, 0xf6, 0x01, 0xf7, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf0, 0x67, 0x00, 0x00, 0xf8, 0x01, 0xf9, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf4, 0x67, 0x00, 0x00, 0xfa, 0x01, 0xfb, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xf8, 0x67, 0x00, 0x00, 0xfc, 0x01, 0xfd, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xfc, 0x67, 0x00, 0x00, 0xfe, 0x01, 0xff, 0x01}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x01, 0x54, 0x15, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0xa0, 0x0f, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0x70, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x70, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x85, 0xe0, 0x01, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00, 0x44, 0x06, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x50, 0x00, 0xf0}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x24, 0xc3, 0x22, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0xa0, 0x00, 0x00, 0x01, 0x24, 0x08, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0xa0, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x20, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0xa0, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x20, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0xa0, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0xa0, 0x00, 0x00, 0x01, 0x24, 0x08, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x41, 0x71, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0x11, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0xa0, 0x00, 0x00, 0x6b, 0xa0, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x10, 0xa0, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x10, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0xa0, 0x00, 0x00, 0x63, 0xa0, 0x80, 0x01}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x0c, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0xa0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x0c, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0xa0, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x0c, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0xa0, 0x00, 0x00, 0x01, 0x04, 0x02, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x17, 0x71, 0xe4, 0x0e}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x1f, 0x71, 0xe4, 0x0e}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00}, 100);
                send_parameters(camera_parameters, true);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x24, 0xc7, 0x22, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x14, 0x10, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x18, 0x10, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x0c, 0x10, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x5c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x64, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x68, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x74, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x78, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x8c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x90, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x94, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x98, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x9c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x20, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x20, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x20, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x20, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x20, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xa0, 0x20, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x1c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x3c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x48, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x4c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x50, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x54, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x28, 0x90, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00, 0x45, 0x06, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x24, 0xc7, 0x22, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x54, 0x00, 0xf0}, 100);
                const auto bulk_timeout =
                    static_cast<uint32_t>(std::chrono::duration_cast<std::chrono::milliseconds>(timeout).count());
                _loop = std::thread([this, bulk_timeout, buffers_count]() {
                    try {
                        std::vector<std::vector<uint8_t>> buffers(buffers_count);
                        std::vector<libusb_transfer*> transfers(buffers_count, nullptr);
                        for (auto& buffer : buffers) {
                            buffer.resize(1 << 17);
                        }
                        auto callback = [](libusb_transfer* transfer) {
                            auto that =
                                reinterpret_cast<sepia::psee413::buffered_camera<HandleBuffer, HandleException>*>(
                                    transfer->user_data);
                            try {
                                switch (transfer->status) {
                                    case LIBUSB_TRANSFER_CANCELLED: {
                                        if (that->_active_transfers > 0) {
                                            --that->_active_transfers;
                                        }
                                        break;
                                    }
                                    case LIBUSB_TRANSFER_COMPLETED:
                                    case LIBUSB_TRANSFER_TIMED_OUT:
                                    case LIBUSB_TRANSFER_STALL: {
                                        that->copy_and_push(
                                            transfer->buffer, transfer->buffer + transfer->actual_length);
                                        usb::throw_on_error(
                                            "libusb_(re)submit_transfer", libusb_submit_transfer(transfer));
                                        break;
                                    }
                                    case LIBUSB_TRANSFER_OVERFLOW: {
                                        throw std::runtime_error("LIBUSB_TRANSFER_OVERFLOW");
                                        break;
                                    }
                                    case LIBUSB_TRANSFER_ERROR: {
                                        throw std::runtime_error("LIBUSB_TRANSFER_ERROR");
                                        break;
                                    }
                                    case LIBUSB_TRANSFER_NO_DEVICE: {
                                        throw usb::device_disconnected(name);
                                        break;
                                    }
                                    default: {
                                        throw std::runtime_error(
                                            std::string("unknown transfer status ") + std::to_string(transfer->status));
                                        break;
                                    }
                                }
                            } catch (...) {
                                if (that->_active_transfers > 0) {
                                    --that->_active_transfers;
                                }
                                if (that->_running.exchange(false)) {
                                    that->_handle_exception(std::current_exception());
                                }
                            }
                        };
                        for (std::size_t index = 0; index < buffers_count; ++index) {
                            transfers[index] = libusb_alloc_transfer(0);
                            _interface.fill_bulk_transfer(
                                transfers[index],
                                (1 | LIBUSB_ENDPOINT_IN),
                                buffers[index],
                                callback,
                                this,
                                bulk_timeout);
                            transfers[index]->flags &= ~LIBUSB_TRANSFER_FREE_BUFFER;
                            transfers[index]->flags &= ~LIBUSB_TRANSFER_FREE_TRANSFER;
                            usb::throw_on_error(
                                std::string("libusb_submit_transfer ") + std::to_string(index),
                                libusb_submit_transfer(transfers[index]));
                        }
                        auto context = _interface.context();
                        timeval libusb_events_timeout;
                        libusb_events_timeout.tv_sec = 1;
                        libusb_events_timeout.tv_usec = 0;
                        int32_t completed = 0;
                        while (this->_running.load(std::memory_order_relaxed)) {
                            libusb_events_timeout.tv_sec = 1;
                            libusb_events_timeout.tv_usec = 0;
                            usb::throw_on_error(
                                "libusb_handle_events_completed",
                                libusb_handle_events_timeout_completed(
                                    context.get(), &libusb_events_timeout, &completed));
                        }
                        for (auto& transfer : transfers) {
                            libusb_cancel_transfer(transfer);
                        }
                        while (this->_active_transfers > 0) {
                            libusb_events_timeout.tv_sec = 0;
                            libusb_events_timeout.tv_usec = 10000;
                            usb::throw_on_error(
                                "libusb_handle_events_completed",
                                libusb_handle_events_timeout_completed(
                                    context.get(), &libusb_events_timeout, &completed));
                        }
                        for (auto& transfer : transfers) {
                            libusb_free_transfer(transfer);
                        }
                    } catch (...) {
                        if (this->_running.exchange(false)) {
                            this->_handle_exception(std::current_exception());
                        }
                    }
                });
                _parameters_loop = std::thread([this, timeout]() {
                    try {
                        while (this->_running.load(std::memory_order_relaxed)) {
                            parameters local_parameters;
                            {
                                std::unique_lock<std::mutex> lock(this->_mutex);
                                if (!this->_update_required) {
                                    if (!this->_condition_variable.wait_for(
                                            lock, timeout, [this] { return this->_update_required; })) {
                                        continue;
                                    }
                                }
                                local_parameters = this->_parameters;
                                this->_update_required = false;
                            }
                            send_parameters(local_parameters, false);
                        }
                    } catch (...) {
                        if (this->_running.exchange(false)) {
                            this->_handle_exception(std::current_exception());
                        }
                    }
                });
            }
            buffered_camera(const buffered_camera&) = delete;
            buffered_camera(buffered_camera&& other) = delete;
            buffered_camera& operator=(const buffered_camera&) = delete;
            buffered_camera& operator=(buffered_camera&& other) = delete;
            virtual ~buffered_camera() {
                this->_running.store(false, std::memory_order_relaxed);
                _loop.join();
                _parameters_loop.join();
                reset();
            }

            protected:
            /// bulk_request sends two bulk transfers (write then read).
            virtual std::vector<uint8_t> bulk_request(std::vector<uint8_t>&& bytes, uint32_t timeout) {
                _interface.bulk_transfer("bulk request", 0x02, bytes, timeout);
                bytes.resize(16);
                return _interface.bulk_transfer("bulk response", 0x82, std::move(bytes), timeout);
            }

            /// reset sends destructor packets.
            virtual void reset() {
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x24, 0xc3, 0x22, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x50, 0x00, 0xf0}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x90, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00, 0x44, 0x06, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00}, 100);
                for (;;) {
                    std::vector<uint8_t> buffer(1 << 17);
                    _interface.bulk_transfer_accept_timeout("flushing the camera", 0x81, buffer, 100);
                    if (buffer.empty()) {
                        break;
                    }
                }
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x24, 0xc3, 0x22, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x50, 0x00, 0xf0}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x28, 0x90, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00, 0x44, 0x06, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x14, 0x71, 0xe4, 0x0e}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x0c, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x0c, 0xa0, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x10, 0xa0, 0x00, 0x00, 0x68, 0x80, 0x80, 0x01}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0x11, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x20, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x20, 0xa0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x08, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x08, 0xa0, 0x00, 0x00, 0x00, 0x24, 0x08, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x44, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x44, 0xb0, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x04, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x04, 0xb0, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0xc8, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x64, 0x00, 0x50}, 100);
                // bulk_request({0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x64, 0x00, 0x10}, 100);
                bulk_request({0x56, 0x00, 0x00, 0x00, 0x7c, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 100);
            }

            /// send_parameters updates the camera parameters.
            virtual void send_parameters(const parameters& camera_parameters, bool force) {
                sepia_psee413_bias(
                    pr, 0x00, bgen_vdac_ctl(0xc4) | bgen_buf_stg(1) | bgen_mux_en | bgen_buf_en | bgen_idac_en);
                sepia_psee413_bias(
                    fo_p, 0x04, bgen_vdac_ctl(0xe8) | bgen_buf_stg(1) | bgen_mux_en | bgen_buf_en | bgen_idac_en);
                sepia_psee413_bias(fo_n, 0x08, bgen_vdac_ctl(0x00) | bgen_buf_stg(1) | bgen_mux_en | bgen_idac_en);
                sepia_psee413_bias(
                    hpf, 0x0c, bgen_vdac_ctl(0xff) | bgen_buf_stg(1) | bgen_mux_en | bgen_buf_en | bgen_idac_en);
                sepia_psee413_bias(
                    diff_on, 0x10, bgen_vdac_ctl(0x63) | bgen_buf_stg(1) | bgen_mux_en | bgen_buf_en | bgen_idac_en);
                sepia_psee413_bias(
                    diff, 0x14, bgen_vdac_ctl(0x50) | bgen_buf_stg(1) | bgen_mux_en | bgen_buf_en | bgen_idac_en);
                sepia_psee413_bias(
                    diff_off, 0x18, bgen_vdac_ctl(0x37) | bgen_buf_stg(1) | bgen_mux_en | bgen_buf_en | bgen_idac_en);
                sepia_psee413_bias(
                    refr,
                    0x20,
                    bgen_vdac_ctl(0xcd) | bgen_buf_stg(1) | bgen_ibtype_sel | bgen_mux_en | bgen_buf_en | bgen_idac_en);
                sepia_psee413_bias(
                    reqpuy,
                    0x40,
                    bgen_vdac_ctl(0x8a) | bgen_buf_stg(1) | bgen_ibtype_sel | bgen_mux_en | bgen_buf_en | bgen_idac_en);
                sepia_psee413_bias(
                    blk, 0x4c, bgen_vdac_ctl(0x92) | bgen_buf_stg(1) | bgen_mux_en | bgen_buf_en | bgen_idac_en);
                _previous_parameters = camera_parameters;
            }

            /// read loads control data from the camera.
            virtual std::vector<uint8_t> read(uint8_t b_request, uint16_t w_value, uint16_t w_index, std::size_t size) {
                std::vector<uint8_t> buffer(size);
                _interface.control_transfer("read state", 0xc0, b_request, w_value, w_index, buffer);
                return buffer;
            }

            usb::interface _interface;
            std::thread _loop;
            std::thread _parameters_loop;
            parameters _previous_parameters;
            std::size_t _active_transfers;
        };

        /// decode implements a byte stream decoder for the PEK3SVCD camera.
        template <typename HandleEvent, typename HandleTriggerEvent, typename BeforeBuffer, typename AfterBuffer>
        class decode {
            public:
            decode(
                HandleEvent&& handle_event,
                HandleTriggerEvent&& handle_trigger_event,
                BeforeBuffer&& before_buffer,
                AfterBuffer&& after_buffer) :
                _handle_event(std::forward<HandleEvent>(handle_event)),
                _handle_trigger_event(std::forward<HandleTriggerEvent>(handle_trigger_event)),
                _before_buffer(std::forward<BeforeBuffer>(before_buffer)),
                _after_buffer(std::forward<AfterBuffer>(after_buffer)),
                _previous_msb_t(0),
                _previous_lsb_t(0),
                _overflows(0),
                _event({0, 0, 0, false}) {}
            decode(const decode&) = default;
            decode(decode&& other) = default;
            decode& operator=(const decode&) = default;
            decode& operator=(decode&& other) = default;
            virtual ~decode() {}

            /// operator() decodes a buffer of bytes.
            virtual void operator()(const std::vector<uint8_t>& buffer, std::size_t used, std::size_t size) {
                const auto dispatch = _before_buffer(used, size);
                const auto system_timestamp =
                    *reinterpret_cast<const uint64_t*>(buffer.data() + (buffer.size() - sizeof(uint64_t)));
                if (dispatch) {
                    for (std::size_t index = 0; index < ((buffer.size() - sizeof(uint64_t)) / 2) * 2; index += 2) {
                        switch (buffer[index + 1] >> 4) {
                            case 0b0000:
                                _event.y = static_cast<uint16_t>(
                                    buffer[index] | (static_cast<uint16_t>(buffer[index + 1] & 0b111) << 8));
                                if (_event.y < height) {
                                    _event.y = static_cast<uint16_t>(height - 1 - _event.y);
                                }
                                break;
                            case 0b0010:
                                _event.x = static_cast<uint16_t>(
                                    buffer[index] | (static_cast<uint16_t>(buffer[index + 1] & 0b111) << 8));
                                _event.on = ((buffer[index + 1] >> 3) & 1) == 1;
                                if (_event.x < width && _event.y < height) {
                                    _handle_event(_event);
                                }
                                break;
                            case 0b0011:
                                _event.x = static_cast<uint16_t>(
                                    buffer[index] | (static_cast<uint16_t>(buffer[index + 1] & 0b111) << 8));
                                _event.on = ((buffer[index + 1] >> 3) & 1) == 1;
                                break;
                            case 0b0100:
                                for (uint8_t bit = 0; bit < 8; ++bit) {
                                    if (((buffer[index] >> bit) & 1) == 1) {
                                        if (_event.x < width && _event.y < height) {
                                            _handle_event(_event);
                                        }
                                    }
                                    ++_event.x;
                                }
                                for (uint8_t bit = 0; bit < 4; ++bit) {
                                    if (((buffer[index + 1] >> bit) & 1) == 1) {
                                        if (_event.x < width && _event.y < height) {
                                            _handle_event(_event);
                                        }
                                    }
                                    ++_event.x;
                                }
                                break;
                            case 0b0101:
                                for (uint8_t bit = 0; bit < 8; ++bit) {
                                    if (((buffer[index] >> bit) & 1) == 1) {
                                        if (_event.x < width && _event.y < height) {
                                            _handle_event(_event);
                                        }
                                    }
                                    ++_event.x;
                                }
                                break;
                            case 0b0110: {
                                const auto lsb_t = static_cast<uint32_t>(
                                    buffer[index] | (static_cast<uint32_t>(buffer[index + 1] & 0b1111) << 8));
                                if (lsb_t != _previous_lsb_t) {
                                    _previous_lsb_t = lsb_t;
                                    const auto t = static_cast<uint64_t>(_previous_lsb_t | (_previous_msb_t << 12))
                                                   + (static_cast<uint64_t>(_overflows) << 24);
                                    if (t >= _event.t) {
                                        _event.t = t;
                                    }
                                }
                                break;
                            }
                            case 0b1000: {
                                const auto msb_t = static_cast<uint32_t>(
                                    buffer[index] | (static_cast<uint32_t>(buffer[index + 1] & 0b1111) << 8));
                                if (msb_t != _previous_msb_t) {
                                    if (msb_t > _previous_msb_t) {
                                        if (msb_t - _previous_msb_t < static_cast<uint32_t>((1 << 12) - 2)) {
                                            _previous_lsb_t = 0;
                                            _previous_msb_t = msb_t;
                                        }
                                    } else {
                                        if (_previous_msb_t - msb_t > static_cast<uint32_t>((1 << 12) - 2)) {
                                            ++_overflows;
                                            _previous_lsb_t = 0;
                                            _previous_msb_t = msb_t;
                                        }
                                    }
                                    const auto t = static_cast<uint64_t>(_previous_lsb_t | (_previous_msb_t << 12))
                                                   + (static_cast<uint64_t>(_overflows) << 24);
                                    if (t >= _event.t) {
                                        _event.t = t;
                                    }
                                }
                                break;
                            }
                            case 0b1010:
                                _handle_trigger_event(
                                    {_event.t,
                                     system_timestamp,
                                     static_cast<uint8_t>(buffer[index + 1] & 0b1111),
                                     (buffer[index] & 1) == 1});
                                break;
                            default:
                                break;
                        }
                    }
                } else {
                    for (std::size_t index = 0; index < ((buffer.size() - sizeof(uint64_t)) / 2) * 2; index += 2) {
                        switch (buffer[index + 1] >> 4) {
                            case 0b0000:
                                _event.y = static_cast<uint16_t>(
                                    buffer[index] | (static_cast<uint16_t>(buffer[index + 1] & 0b111) << 8));
                                if (_event.y < height) {
                                    _event.y = static_cast<uint16_t>(height - 1 - _event.y);
                                }
                                break;
                            case 0b0010:
                                _event.x = static_cast<uint16_t>(
                                    buffer[index] | (static_cast<uint16_t>(buffer[index + 1] & 0b111) << 8));
                                _event.on = ((buffer[index + 1] >> 3) & 1) == 1;
                                break;
                            case 0b0011:
                                _event.x = static_cast<uint16_t>(
                                    buffer[index] | (static_cast<uint16_t>(buffer[index + 1] & 0b111) << 8));
                                _event.on = ((buffer[index + 1] >> 3) & 1) == 1;
                                break;
                            case 0b0100:
                                _event.x += 12;
                                break;
                            case 0b0101:
                                _event.x += 8;
                                break;
                            case 0b0110: {
                                const auto lsb_t = static_cast<uint32_t>(
                                    buffer[index] | (static_cast<uint32_t>(buffer[index + 1] & 0b1111) << 8));
                                if (lsb_t != _previous_lsb_t) {
                                    _previous_lsb_t = lsb_t;
                                    const auto t = static_cast<uint64_t>(_previous_lsb_t | (_previous_msb_t << 12))
                                                   + (static_cast<uint64_t>(_overflows) << 24);
                                    if (t >= _event.t) {
                                        _event.t = t;
                                    }
                                }
                                break;
                            }
                            case 0b1000: {
                                const auto msb_t = static_cast<uint32_t>(
                                    buffer[index] | (static_cast<uint32_t>(buffer[index + 1] & 0b1111) << 8));
                                if (msb_t != _previous_msb_t) {
                                    if (msb_t > _previous_msb_t) {
                                        if (msb_t - _previous_msb_t < static_cast<uint32_t>((1 << 12) - 2)) {
                                            _previous_lsb_t = 0;
                                            _previous_msb_t = msb_t;
                                        }
                                    } else {
                                        if (_previous_msb_t - msb_t > static_cast<uint32_t>((1 << 12) - 2)) {
                                            ++_overflows;
                                            _previous_lsb_t = 0;
                                            _previous_msb_t = msb_t;
                                        }
                                    }
                                    const auto t = static_cast<uint64_t>(_previous_lsb_t | (_previous_msb_t << 12))
                                                   + (static_cast<uint64_t>(_overflows) << 24);
                                    if (t >= _event.t) {
                                        _event.t = t;
                                    }
                                }
                                break;
                            }
                            default:
                                break;
                        }
                    }
                }
                _after_buffer();
            }

            protected:
            HandleEvent _handle_event;
            HandleTriggerEvent _handle_trigger_event;
            BeforeBuffer _before_buffer;
            AfterBuffer _after_buffer;
            uint32_t _previous_msb_t;
            uint32_t _previous_lsb_t;
            uint32_t _overflows;
            sepia::dvs_event _event;
        };

        /// camera is an event observable connected to a CSD4MHDCD camera.
        template <
            typename HandleEvent,
            typename HandleTriggerEvent,
            typename BeforeBuffer,
            typename AfterBuffer,
            typename HandleException>
        class camera : public buffered_camera<
                           decode<HandleEvent, HandleTriggerEvent, BeforeBuffer, AfterBuffer>,
                           HandleException> {
            public:
            camera(
                HandleEvent&& handle_event,
                HandleTriggerEvent&& handle_trigger_event,
                BeforeBuffer&& before_buffer,
                AfterBuffer&& after_buffer,
                HandleException&& handle_exception,
                const parameters& camera_parameters = default_parameters,
                const std::string& serial = {},
                const std::chrono::steady_clock::duration& timeout = std::chrono::milliseconds(100),
                std::size_t buffers_count = 64,
                std::size_t fifo_size = 4096,
                std::function<void()> handle_drop = []() {}) :
                buffered_camera<decode<HandleEvent, HandleTriggerEvent, BeforeBuffer, AfterBuffer>, HandleException>(
                    decode<HandleEvent, HandleTriggerEvent, BeforeBuffer, AfterBuffer>(
                        std::forward<HandleEvent>(handle_event),
                        std::forward<HandleTriggerEvent>(handle_trigger_event),
                        std::forward<BeforeBuffer>(before_buffer),
                        std::forward<AfterBuffer>(after_buffer)),
                    std::forward<HandleException>(handle_exception),
                    camera_parameters,
                    serial,
                    timeout,
                    buffers_count,
                    fifo_size,
                    handle_drop) {}
            camera(const camera&) = delete;
            camera(camera&& other) = delete;
            camera& operator=(const camera&) = delete;
            camera& operator=(camera&& other) = delete;
            virtual ~camera() {}
        };

        /// make_camera creates a camera from functors.
        template <
            typename HandleEvent,
            typename HandleTriggerEvent,
            typename BeforeBuffer,
            typename AfterBuffer,
            typename HandleException>
        std::unique_ptr<camera<HandleEvent, HandleTriggerEvent, BeforeBuffer, AfterBuffer, HandleException>>
        make_camera(
            HandleEvent&& handle_event,
            HandleTriggerEvent&& handle_trigger_event,
            BeforeBuffer&& before_buffer,
            AfterBuffer&& after_buffer,
            HandleException&& handle_exception,
            const parameters& camera_parameters = default_parameters,
            const std::string& serial = {},
            const std::chrono::steady_clock::duration& timeout = std::chrono::milliseconds(100),
            std::size_t buffers_count = 64,
            std::size_t fifo_size = 4096,
            std::function<void()> handle_drop = []() {}) {
            return sepia::make_unique<
                camera<HandleEvent, HandleTriggerEvent, BeforeBuffer, AfterBuffer, HandleException>>(
                std::forward<HandleEvent>(handle_event),
                std::forward<HandleTriggerEvent>(handle_trigger_event),
                std::forward<BeforeBuffer>(before_buffer),
                std::forward<AfterBuffer>(after_buffer),
                std::forward<HandleException>(handle_exception),
                camera_parameters,
                serial,
                timeout,
                buffers_count,
                fifo_size,
                std::move(handle_drop));
        }
    }
}
